#! /bin/sh

# The Docker App Container's development entrypoint.
# This is a script used by the project's Docker development environment to
# setup the app containers and databases upon runnning.
set -e

: ${APP_PATH:="/usr/src"}
: ${APP_TEMP_PATH:="$APP_PATH/tmp"}
: ${APP_SETUP_LOCK:="$APP_TEMP_PATH/setup.lock"}
: ${APP_SETUP_WAIT:="5"}

# 1: Define the functions lock and unlock our app containers setup processes:
lock_setup() { mkdir -p $APP_TEMP_PATH && touch $APP_SETUP_LOCK; }
unlock_setup() { rm -rf $APP_SETUP_LOCK; }
wait_setup() { echo "Waiting for app setup to finish..."; sleep $APP_SETUP_WAIT; }

# 2: 'Unlock' the setup process if the script exits prematurely:
trap unlock_setup HUP INT QUIT KILL TERM EXIT

# 3: Specify a default command, in case it wasn't issued:
if [ -z "$1" ]; then set -- php artisan serve --host=0.0.0.0 --port=8000 "$@"; fi

if [ "$1" = "php" ] || [ "$1" = "artisan" ]
then
  # 1: Wait until the setup 'lock' file no longer exists:
  while [ -f $APP_SETUP_LOCK ]; do wait_setup; done

  # 2: 'Lock' the setup process, to prevent a race condition when the project's
  # app containers will try to install gems and setup the database concurrently:
  lock_setup

  # 3: Install app dependencies
  composer install --no-interaction

  # Check for app key
  if [ "${APP_KEY}" == "" ] && [ "${APP_ENV}" == "development" ]; then
    echo APP_KEY is empty
    php artisan key:generate
  fi

  # 5: 'Unlock' the setup process:
  unlock_setup

  while ! mysql -u "${DB_USERNAME}" -p"${DB_PASSWORD}" -h "${DB_HOST}" 2>/dev/null -e ";" ; do
    echo "Setting up database";
  done

  # 4: Setup the database
  php artisan migrate

  

fi

# 4: Execute the given or default command:
exec "$@"